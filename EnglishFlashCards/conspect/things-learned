// 🐍 PYTHON

- when creating a database class (i.e. User) and a login manager, the class has to inherit both db.Model's and UserMixin's
  attributes. UserMixin creates its own **init**, so any attributes passed into the database model have to be initialised
  by creating its own **init**.

- to improve the organization of main.py, create separate folders for storing forms and models.
  To enable importing their contents as modules, add an empty **init**.py file in each folder.
  In the models/**init**.py file, it is best practice to initialize the database to ensure it is properly set up
  before being used in other parts of the application.

// 💻 JAVASCRIPT

// 🌐 HTML

- to allow format-on-save click cmd + option + L (if not working, got to Pycharm - Settings - Tools)

- to allow uploading files, create a form:
<form method="POST" enctype="multipart/form-data"> 
<input type="file" name="csv_file" required />

// 🎨 CSS

- when creating a background color/gradient etc., set the html and body's height to 100%. By default the html takes
  as much space as needed, so when there is no content, the background is not going to be spread on the whole screen
  html, body {
  height: 100vh;
  }

- to center an element according to its actual positioning use:
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  'top' and 'left' place element's upper left corner in the middle of the container, then 'transform' shifts it right into
  place

- to center an element using flex:
  display: flex;
  align-items: center; // vertically
  justify-content: center; // horizontally

- to add shadow to an irregular-shaped element:
  filter: drop-shadow(x y blur rgba());
